<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
<head>
    <title>Connected Clients</title>
    <!--<meta charset="UTF-8"> -->
	<script src="operation.js" type="text/javascript" ></script>
	<script src="client.js" type="text/javascript" ></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> 
    <!--<script type="text/javascript" src="jquery.js"></script>  -->
    <script src="/socket.io/socket.io.js"></script>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
    
</head>
<body>
    <h1> Username: <%=UID%> </h1>
	<h1>Document ID: <%=DOCID%> </h1>
    <textarea id="editor" style = "margin: 50px; width: 90%; height: 500px;"></textarea>

    <script>

		var myname = '<%=UID%>';
		var client;                         // instance of the current client
		var socket;                         // global variable, to be accessed in client.js
        var input = document.getElementById ("editor");
		console.log('uid: ' + myname);



		$(document).ready(function () {

            // ========== initialization ==========
            socket = io.connect('http://169.234.11.161:3000');

            client = new Client(myname, '',  0);                        // default constructor

            // notify server of this new client and requesting the latest text
			socket.emit('newClient', {uid: myname});

			// initialization with the text received from server
			socket.on('initClient', function(data) {					// data {uid:data.uid, v:version, txt: text}

				if (data.uid == myname) {
					client.setDoc(data.txt);
					client.setVersion( data.v );
					$('#editor').val(data.txt);
					console.log('Client '+myname + ', (me), has joined in.');
				}
                else {
					console.log('A client just joined in: '+data.uid+'; his version is : V'+data.v);
				}

			});



            // ========== receiving an operation from server ==========
            // TODO: selection transform

			// when receiving an operation from the server, check uid to apply it to local text or perform serverAck
            // data: {ops:operation.ops, initLen:operation.initLen, finalLen:operation.finalLen, uid: sender, v: version}
			socket.on('edit_editor', function(data) {

				// if the incoming operation is THE operation the client has sent to server
				// it means the client's outstanding operation is accepted by the server
				// perform client.serverAck

				console.log('Received an operation from server !');
				console.log('uid: '+data.uid);
				console.log('version: '+data.v);

				operation = new Operation(data.ops, data.initLen, data.finalLen);
				operation.displayOps();

				if (data.uid === client.uid) {
					console.log('The received operaiton is previously sent by me ! So perform serverAck() !');
					client.serverAck();
				}

				// when the incoming op is not the op that the client just sent to server, simply apply it to the client's document
				else {
					console.log('The received operaiton is not previously sent by me ! So perform applyServer() !');
					client.applyServer(operation);
					// display modified text
					$('#editor').val(client.doc);
				}



			});



            // ========== handle local mutations ==========


            // when a key is released, create an operation for it and invoke client.applyClient(operation)
            // chrome follow IE keycode: http://unixpapa.com/js/key.html
			// keycode: https://css-tricks.com/snippets/javascript/javascript-keycodes/
			$('#editor').on('keydown',function(key) {
                console.log('A key is pressed !');
				var op = new Operation();
				var strLen =  $('#editor').val().length;
				var position = $('#editor').prop("selectionStart");



				// if delete a char: 8 == BackSpace,
				if (key.keyCode == 8 ) {
					if (position > 0) {								// if backspace is pressed at the start of the string, do nothing
						console.log(position-1, strLen-position);
						op.retain(position-1).delete(1).retain(strLen-position);
						console.log('This key creates an op: ');
						op.displayOps();
						client.applyClient(op);
					}
				}
				//  if delete a char: 46 == Delete
				else if (key.keyCode == 46) {
					if (position < strLen) {					// when delete is pressed at the end of the string, do nothing
						op.retain(position).delete(1).retain(strLen - position - 1);
						console.log('This key creates an op: ');
						op.displayOps();
						client.applyClient(op);
					}
				}
				// if insert a char
				// 9:tab; 13: enter; 48-57: 0-9; 65-90: a-z;
				else if(key.keyCode == 9 || key.keyCode == 13 || (key.keyCode > 46 && key.keyCode < 91)) {
                    value = String.fromCharCode(key.keyCode).toLowerCase();
                    op.retain(position).insert(value).retain(strLen-position);
					console.log('This key creates an op: ');
                    op.displayOps();
                    client.applyClient(op);
                    //input.selectionStart = 3;
                    //input.selectionEnd = 3;
				}
				// 32: space
				else if (key.keyCode == 32) {
                    op.retain(position).insert(' ').retain(strLen-position);
					console.log('This key creates an op: ');
                    op.displayOps();
                    client.applyClient(op);
				}

                // symbols and control keys
                else {
                    //input.selectionStart = 3;
                    //input.selectionEnd = 3;

                    console.log('Pressed key is not yet supported !');
                }


			});


		});




    </script>
    
  
</body>
</html>