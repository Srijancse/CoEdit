<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
<head>
    <title>Connected Clients</title>
    <!--<meta charset="UTF-8"> -->
	<script src="operation.js" type="text/javascript" ></script>
	<script src="selection.js" type="text/javascript" ></script>
	<script src="client.js" type="text/javascript" ></script>
	<script src="undomanager.js" type="text/javascript" ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script> 
    <!--<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>--> 
    <!--<script type="text/javascript" src="jquery.js"></script>  -->
    <script src = "https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.2/socket.io.js"></script>
    <!--<script src="/socket.io/socket.io.js"></script>-->
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
    
</head>
<body>
    <h1>Username: <%=UID%> </h1>
	<h1>Document ID: <%=DOCID%> </h1>
	<h1>Active Clients:<span id = 'activeClietns'></span> </h1>
    <textarea id="editor" style = "margin: 50px; width: 90%; height: 500px;"></textarea>
	
    <script>

		var myname = '<%=UID%>';
		var client;                         // instance of the current client
		var socket;                         // global variable, to be accessed in client.js
        var input = document.getElementById ("editor");
		console.log('uid: ' + myname);
        var undomanager;
		var ctrldown = false;
		var inverse = new Operation();

		$(document).ready(function () {

            // ========== initialization ==========
            //socket = io.connect('http://localhost:3000');
            socket = io.connect('http://localhost:' + '<%=SYSPORT%>');
            client = new Client(myname, '',  0);                        // default constructor
			
			undomanager = new UndoManager(10);

            // notify server of this new client and requesting the latest text
			socket.emit('newClient', {uid: myname});



			socket.on('updateClients', function(data) {
				var clients = data.activeClients.join(', ');
				$("#activeClietns").text(clients);
        	});

			// initialization with the text received from server
			socket.on('initClient', function(data) {					// data {uid:data.uid, v:version, txt: text}

				var clients = data.activeClients.join(', ');
				$("#activeClietns").text(clients);

				if (data.uid == myname) {
					client.setDoc(data.txt);
					client.setVersion( data.v );
					$('#editor').val(data.txt);
					console.log('Client '+myname + ', (me), has joined in.');
				}
                else {
					console.log('A client just joined in: '+data.uid+'; his version is : V'+data.v);
				}

			});
			
			socket.on('recover', function(data){
			    if(data.uid == myname)
				{
				    var clients = data.activeClients.join(', ');
				    $("#activeClietns").text(clients);
					client.setDoc(data.txt);
					client.setVersion(data.v);					
					$('#editor').val(data.txt);
					setSelectionRange(input, data.cursor, data.cursor);
					console.log('recover succeeds! ');
				}
			
			});



            // ========== receiving an operation from server ==========
            // TODO: selection transform

			// when receiving an operation from the server, check uid to apply it to local text or perform serverAck
            // data: {ops:operation.ops, initLen:operation.initLen, finalLen:operation.finalLen, uid: sender, v: version}
			socket.on('edit_editor', function(data) {

				// if the incoming operation is THE operation the client has sent to server
				// it means the client's outstanding operation is accepted by the server
				// perform client.serverAck

				console.log('Received an operation from server !');
				console.log('uid: '+data.uid);
				console.log('version: '+data.v);

				operation = new Operation(data.ops, data.initLen, data.finalLen);
				operation.displayOps();

				if (data.uid === client.uid) {
					console.log('The received operaiton is previously sent by me ! So perform serverAck() !');
					client.serverAck();
				}

				// when the incoming op is not the op that the client just sent to server, simply apply it to the client's document
				else {
					console.log('The received operaiton is not previously sent by me ! So perform applyServer() !');
					var start = $('#editor').prop("selectionStart");
				    var end = $('#editor').prop("selectionEnd");
				    /*
      				try{
					
					    // transform undo redo!
						undomanager.transform(operation);					
					}
					catch(err)
					{
					    console.log('Undo transformation error! ' + err);
					}*/
					try{
					
						console.log('original range is : ' + start + ' ' + end);
						var range = new Range(start, end);

      					client.applyServer(operation);
						range = range.transform(operation);
						$('#editor').val(client.doc);
						
						//input.setSelectionRange(range.anchor, range.head);
						setSelectionRange(input, range.anchor, range.head);
						console.log('current range is : ' + range.anchor + ' ' + range.head);
						
					}
					catch (err) {
						console.log('ApplyServer failed, re-sync with server !' + err);						
						socket.emit('reJoin', {uid: myname, cursor: start});
					}

				}



			});



            // ========== handle local mutations ==========


            // when a key is released, create an operation for it and invoke client.applyClient(operation)
            // chrome follow IE keycode: http://unixpapa.com/js/key.html
			// keycode: https://css-tricks.com/snippets/javascript/javascript-keycodes/
			$('#editor').on('keyup', function(key)
			{
			    if(key.keyCode == 17)
				{
				    console.log('Ctrl is up');
					ctrldown = false;
				}
			});
			
			
			
			$('#editor').on('keydown',function(key) 
			{
                console.log('A key is pressed !');
				var op = new Operation();
				var strLen =  $('#editor').val().length;
				var position = $('#editor').prop("selectionStart");
				var value;
                client.doc = $('#editor').val();

				// ======================== delete a char ========================
				// 8 == BackSpace,
				if (key.keyCode == 8 ) {
					if (position > 0) {								// if backspace is pressed at the start of the string, do nothing
						console.log(position-1, strLen-position);
						op.retain(position-1).delete(1).retain(strLen-position);
						console.log('This key creates an op: ');
						op.displayOps();
						//var c = $('#editor').val().charAt(position-1);
						//alert('backspace:' + c);
						client.applyClient(op);
						
						inverse = op.invert(client.doc);
						console.log('Inverse operation is~~~~~ ');
						inverse.displayOps();
						undomanager.add(inverse, false);
						
					}
				}

				// 46 == Delete
				else if (key.keyCode == 46) {
					if (position < strLen) {					// when delete is pressed at the end of the string, do nothing
						op.retain(position).delete(1).retain(strLen - position - 1);
						console.log('This key creates an op: ');
						op.displayOps();
						client.applyClient(op);
						
						inverse = op.invert(client.doc);
						console.log('Inverse operation is~~~~~ ');
						inverse.displayOps();
						undomanager.add(inverse, false);
					}
				}

				// ======================== insert a char ====================================
				// 9:tab; 13: enter; 48-57: 0-9; 65-90: a-z;
				else if(key.keyCode == 9 || key.keyCode == 13 || (key.keyCode > 46 && key.keyCode < 91)) {
				    if(ctrldown == true && key.keyCode == 90) // Ctrl + Z undo
					{
					    console.log('Ctrl + Z!');
						event.returnValue = false;
						undomanager.performUndo();						
					}
					else if(ctrldown == true && key.keyCode == 89)  // Ctrl + Y redo
					{
					    console.log('Ctrl + Y!');
						event.returnValue = false;
						undomanager.performRedo();						
					}
					else
					{
					    value = String.fromCharCode(key.keyCode).toLowerCase();
						op.retain(position).insert(value).retain(strLen-position);
						console.log('This key creates an op: ');
						op.displayOps();
						client.applyClient(op);	

                        inverse = op.invert(client.doc);
						console.log('Inverse operation is~~~~~ ');
						inverse.displayOps();
						undomanager.add(inverse, false);
						
					}
                    
				}

				// 32: space
				else if (key.keyCode == 32) {
                    op.retain(position).insert(' ').retain(strLen-position);
					console.log('This key creates an op: ');
                    op.displayOps();
                    client.applyClient(op);
					
					inverse = op.invert(client.doc);
					console.log('Inverse operation is~~~~~ ');
					inverse.displayOps();
					undomanager.add(inverse, false);
				}

						

				else if (key.keyCode >= 186) {
					// 186: ;
					if (key.keyCode == 186) {
						value = ';';
					}
					// 187: =
					else if (key.keyCode == 187) {
						value = '=';
					}
					// keycode 188:, 189: -, 190: .; 191: /
					// ascii:  44,   45,     46,     47
					else if (key.keyCode >= 188 && key.keyCode <= 191) {
						value = String.fromCharCode(key.keyCode -144).toLowerCase();
					}
					// 192: `
					else if (key.keyCode == 192) {
						value = '`';
					}
					// keycode: 219: [, 220: \, 221: ],
					// ascii: 	91
					else if (key.keyCode >= 219 && key.keyCode <= 221) {
						value = String.fromCharCode(key.keyCode -128).toLowerCase();
					}
					// keycode: 222: '
					else if (key.keyCode == 222) {
						value = String.fromCharCode(39).toLowerCase();
					}




					op.retain(position).insert(value).retain(strLen-position);
					console.log('This key creates an op: ');
					op.displayOps();
					client.applyClient(op);
					
					inverse = op.invert(client.doc);
					console.log('Inverse operation is~~~~~ ');
					inverse.displayOps();
					undomanager.add(inverse, false);
				}

                else if(key.keyCode == 17)
				{
				    console.log('Ctrl is down');
					ctrldown = true;
				}


				// ======================== other ========================
                // symbols and control keys
                else {
                    //input.selectionStart = 3;
                    //input.selectionEnd = 3;
                      
                    console.log('Pressed key is not yet supported !');
                }


			});
			
			$('#editor').on('mouseup', function(){
			    
			    console.log('mouseup : ' + this.selectionStart + " " + this.selectionEnd);
				//setCaretToPos(input, this.selectionStart + 1);
				//var s = this.selectionStart + 1;
				//var e = this.selectionEnd + 1;
				//setSelectionRange(input, s, e);
			
			});
			
			function setSelectionRange(inp, selectionStart, selectionEnd) {
				if (inp.setSelectionRange) {
				    console.log("select 1~~~~~~~~~~~~~");
					inp.focus();
					inp.setSelectionRange(selectionStart, selectionEnd);
				}
				else if (inp.createTextRange) {
				    console.log("select 2~~~~~~~~~~~~~~~");
					var range = inp.createTextRange();
					range.collapse(true);
					range.moveEnd('character', selectionEnd);
					range.moveStart('character', selectionStart);
					range.select();
				}
			}
			
			function setCaretToPos (inp, pos) {
			    setSelectionRange(inp, pos, pos);
			}
			



		});




    </script>
    
  
</body>
</html>
