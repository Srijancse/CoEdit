<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
<head>
    <title>Connected Clients</title>
    <!--<meta charset="UTF-8"> -->
	<script src="operation.js" type="text/javascript" ></script>
	<script src="client.js" type="text/javascript" ></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> 
    <!--<script type="text/javascript" src="jquery.js"></script>  -->
    <script src="/socket.io/socket.io.js"></script>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
    
</head>
<body>
    <h1> Username: <%=UID%> </h1>
	<h1>Document ID: <%=DOCID%> </h1>
    <textarea id="editor" style = "margin: 50px; width: 90%; height: 500px;"></textarea>

    <script>



		var myname = '<%=UID%>';
		var client;
		var socket;

		console.log('uid: ' + myname);

        var cnt = 0;


		$(document).ready(function () {
            client = new Client(myname, '',  0);
			socket = io.connect('http://localhost:3000');

            // send operation every 500 ms
            /*
            var intervalID = setInterval(function(){
                if(composed.ops.length > 0) {
                    client.applyClient(composed);
                    console.log('ApplyClient !');
                    composed = new Operation();
                }

            }, 500);
            */

            // notice server of this new client and start initialization
			socket.emit('newClient');

			// initialization: sync with server
			socket.on('initClient', function(data) {					// data is sent from server: {v: clientVersion, txt: text}
				alert('Initializing client: ' +client.uid + '. Doc version sync with server: V'+ data.v);

				// update current empty text to server's text if server's clientVersion is not 0

                client.setDoc(data.txt);
                client.setVersion( data.v );
                $('#editor').val(data.txt);
                console.log('Init complete for client: '+client.uid+'; now version is : V'+client.version);

			});



			// when receiving an operation from the server, data: {op: operation, uid: sender, v: version}
			socket.on('edit_editor', function(data) {

				// if the incoming operation is THE operation the client has sent to server
				// it means the client's outstanding operation is accepted by the server
				// perform client.serverAck
				if (data.uid === client.uid) {
					client.serverAck();
				}

				// when the incoming operation is not the operation the client has sent to server, simply apply it to the client's document
				else {
					client.applyServer(data.op);
				}

                // display modified text
				$('#editor').val(client.doc);


			});



            // when a key is released, create an operation for it and invoke client.applyClient(operation)
			$('#editor').on('keyup',function(key){
                console.log('A key is pressed !');
				var text = $('#editor').val();
				var strLen =  text.length;
				if(key.keyCode < 37 || key.keyCode > 40)
				{
					var op = new Operation();
					var position = $('#editor').prop("selectionStart");

                    // if delete a char
					if(key.keyCode == 8 || key.keyCode == 46) // 8 == BackSpace, 46 == Delete
                    {
                         op.retain(position).delete(1).retain(strLen-position);
					}
                    // if insert a char
					else
					{
						 value = String.fromCharCode(key.keyCode).toLowerCase();
                         op.retain(position-1).insert(value).retain(strLen-position);
					}

                    console.log('This key creates an op: ');
                    op.displayOps();

                    /*
                    if(composed.ops.length == 0){
                        composed = op;
                    }
                    else {
                        console.log('composed.finalLen = '+composed.finalLen + '; op.intLen = '+op.initLen);
                        composed.compose(op);
                    }
                    console.log('Accumulated operations: ');
                    composed.displayOps();

                    */
                    client.applyClient(op);
				}

                else {
                    console.log('Pressed key is not yet supported !');
                }


			});








		});




    </script>
    
  
</body>
</html>